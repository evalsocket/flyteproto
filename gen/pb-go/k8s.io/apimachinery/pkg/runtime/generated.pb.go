// Code generated by protoc-gen-go. DO NOT EDIT.
// source: k8s.io/apimachinery/pkg/runtime/generated.proto

package runtime

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RawExtension is used to hold extensions in external versions.
//
// To use this, make a field which has RawExtension as its type in your external, versioned
// struct, and Object in your internal struct. You also need to register your
// various plugin types.
//
// // Internal package:
// type MyAPIObject struct {
// 	runtime.TypeMeta `json:",inline"`
// 	MyPlugin runtime.Object `json:"myPlugin"`
// }
// type PluginA struct {
// 	AOption string `json:"aOption"`
// }
//
// // External package:
// type MyAPIObject struct {
// 	runtime.TypeMeta `json:",inline"`
// 	MyPlugin runtime.RawExtension `json:"myPlugin"`
// }
// type PluginA struct {
// 	AOption string `json:"aOption"`
// }
//
// // On the wire, the JSON will look something like this:
// {
// 	"kind":"MyAPIObject",
// 	"apiVersion":"v1",
// 	"myPlugin": {
// 		"kind":"PluginA",
// 		"aOption":"foo",
// 	},
// }
//
// So what happens? Decode first uses json or yaml to unmarshal the serialized data into
// your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.
// The next step is to copy (using pkg/conversion) into the internal struct. The runtime
// package's DefaultScheme has conversion functions installed which will unpack the
// JSON stored in RawExtension, turning it into the correct object type, and storing it
// in the Object. (TODO: In the case where the object is of an unknown type, a
// runtime.Unknown object will be created and stored.)
//
// +k8s:deepcopy-gen=true
// +protobuf=true
// +k8s:openapi-gen=true
type RawExtension struct {
	// Raw is the underlying serialization of this object.
	//
	// TODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.
	Raw                  []byte   `protobuf:"bytes,1,opt,name=raw" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawExtension) Reset()         { *m = RawExtension{} }
func (m *RawExtension) String() string { return proto.CompactTextString(m) }
func (*RawExtension) ProtoMessage()    {}
func (*RawExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e0e4b920403a48c, []int{0}
}

func (m *RawExtension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawExtension.Unmarshal(m, b)
}
func (m *RawExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawExtension.Marshal(b, m, deterministic)
}
func (m *RawExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawExtension.Merge(m, src)
}
func (m *RawExtension) XXX_Size() int {
	return xxx_messageInfo_RawExtension.Size(m)
}
func (m *RawExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_RawExtension.DiscardUnknown(m)
}

var xxx_messageInfo_RawExtension proto.InternalMessageInfo

func (m *RawExtension) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

// TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type,
// like this:
// type MyAwesomeAPIObject struct {
//      runtime.TypeMeta    `json:",inline"`
//      ... // other fields
// }
// func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind
//
// TypeMeta is provided here for convenience. You may use it directly from this package or define
// your own with the same fields.
//
// +k8s:deepcopy-gen=false
// +protobuf=true
// +k8s:openapi-gen=true
type TypeMeta struct {
	// +optional
	ApiVersion *string `protobuf:"bytes,1,opt,name=apiVersion" json:"apiVersion,omitempty"`
	// +optional
	Kind                 *string  `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeMeta) Reset()         { *m = TypeMeta{} }
func (m *TypeMeta) String() string { return proto.CompactTextString(m) }
func (*TypeMeta) ProtoMessage()    {}
func (*TypeMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e0e4b920403a48c, []int{1}
}

func (m *TypeMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeMeta.Unmarshal(m, b)
}
func (m *TypeMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeMeta.Marshal(b, m, deterministic)
}
func (m *TypeMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeMeta.Merge(m, src)
}
func (m *TypeMeta) XXX_Size() int {
	return xxx_messageInfo_TypeMeta.Size(m)
}
func (m *TypeMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeMeta.DiscardUnknown(m)
}

var xxx_messageInfo_TypeMeta proto.InternalMessageInfo

func (m *TypeMeta) GetApiVersion() string {
	if m != nil && m.ApiVersion != nil {
		return *m.ApiVersion
	}
	return ""
}

func (m *TypeMeta) GetKind() string {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ""
}

// Unknown allows api objects with unknown types to be passed-through. This can be used
// to deal with the API objects from a plug-in. Unknown objects still have functioning
// TypeMeta features-- kind, version, etc.
// TODO: Make this object have easy access to field based accessors and settors for
// metadata and field mutatation.
//
// +k8s:deepcopy-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +protobuf=true
// +k8s:openapi-gen=true
type Unknown struct {
	TypeMeta *TypeMeta `protobuf:"bytes,1,opt,name=typeMeta" json:"typeMeta,omitempty"`
	// Raw will hold the complete serialized object which couldn't be matched
	// with a registered type. Most likely, nothing should be done with this
	// except for passing it through the system.
	Raw []byte `protobuf:"bytes,2,opt,name=raw" json:"raw,omitempty"`
	// ContentEncoding is encoding used to encode 'Raw' data.
	// Unspecified means no encoding.
	ContentEncoding *string `protobuf:"bytes,3,opt,name=contentEncoding" json:"contentEncoding,omitempty"`
	// ContentType  is serialization method used to serialize 'Raw'.
	// Unspecified means ContentTypeJSON.
	ContentType          *string  `protobuf:"bytes,4,opt,name=contentType" json:"contentType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Unknown) Reset()         { *m = Unknown{} }
func (m *Unknown) String() string { return proto.CompactTextString(m) }
func (*Unknown) ProtoMessage()    {}
func (*Unknown) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e0e4b920403a48c, []int{2}
}

func (m *Unknown) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unknown.Unmarshal(m, b)
}
func (m *Unknown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unknown.Marshal(b, m, deterministic)
}
func (m *Unknown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unknown.Merge(m, src)
}
func (m *Unknown) XXX_Size() int {
	return xxx_messageInfo_Unknown.Size(m)
}
func (m *Unknown) XXX_DiscardUnknown() {
	xxx_messageInfo_Unknown.DiscardUnknown(m)
}

var xxx_messageInfo_Unknown proto.InternalMessageInfo

func (m *Unknown) GetTypeMeta() *TypeMeta {
	if m != nil {
		return m.TypeMeta
	}
	return nil
}

func (m *Unknown) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Unknown) GetContentEncoding() string {
	if m != nil && m.ContentEncoding != nil {
		return *m.ContentEncoding
	}
	return ""
}

func (m *Unknown) GetContentType() string {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return ""
}

func init() {
	proto.RegisterType((*RawExtension)(nil), "k8s.io.apimachinery.pkg.runtime.RawExtension")
	proto.RegisterType((*TypeMeta)(nil), "k8s.io.apimachinery.pkg.runtime.TypeMeta")
	proto.RegisterType((*Unknown)(nil), "k8s.io.apimachinery.pkg.runtime.Unknown")
}

func init() {
	proto.RegisterFile("k8s.io/apimachinery/pkg/runtime/generated.proto", fileDescriptor_2e0e4b920403a48c)
}

var fileDescriptor_2e0e4b920403a48c = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0xc9, 0xdd, 0xc1, 0xdd, 0xcd, 0x1d, 0x28, 0x5b, 0xa5, 0xd2, 0x90, 0xea, 0x6c, 0x76,
	0xc1, 0xca, 0xca, 0x42, 0x48, 0x69, 0x13, 0xd4, 0xc2, 0x6e, 0x49, 0x86, 0x38, 0x2c, 0x37, 0xbb,
	0xec, 0x8d, 0xc4, 0x7b, 0x29, 0x9f, 0x51, 0xb2, 0xe6, 0x42, 0xb0, 0xb1, 0x1b, 0xfe, 0xf9, 0xbf,
	0x99, 0x0f, 0x8c, 0x7b, 0x38, 0x69, 0xf2, 0xc6, 0x06, 0x3a, 0xda, 0xe6, 0x83, 0x18, 0xe3, 0xd9,
	0x04, 0xd7, 0x99, 0xf8, 0xc9, 0x42, 0x47, 0x34, 0x1d, 0x32, 0x46, 0x2b, 0xd8, 0xea, 0x10, 0xbd,
	0x78, 0x75, 0xfb, 0x0b, 0xe8, 0x39, 0xa0, 0x83, 0xeb, 0xf4, 0x08, 0x94, 0x05, 0xec, 0x6b, 0xdb,
	0x57, 0x5f, 0x82, 0x7c, 0x22, 0xcf, 0xea, 0x1a, 0x96, 0xd1, 0xf6, 0x79, 0x56, 0x64, 0x87, 0x7d,
	0x3d, 0x8c, 0xe5, 0x23, 0x6c, 0x5e, 0xce, 0x01, 0x9f, 0x51, 0xac, 0xba, 0x01, 0xb0, 0x81, 0xde,
	0x30, 0x0e, 0xdd, 0x54, 0xda, 0xd6, 0xb3, 0x44, 0x29, 0x58, 0x39, 0xe2, 0x36, 0x5f, 0xa4, 0x4d,
	0x9a, 0xcb, 0xef, 0x0c, 0xd6, 0xaf, 0xec, 0xd8, 0xf7, 0xac, 0x2a, 0xd8, 0xc8, 0x78, 0x2b, 0xd1,
	0xbb, 0xfb, 0x3b, 0xfd, 0x8f, 0xa1, 0xbe, 0x3c, 0xaf, 0x27, 0xf4, 0x22, 0xb9, 0x98, 0x24, 0xd5,
	0x01, 0xae, 0x1a, 0xcf, 0x82, 0x2c, 0x15, 0x37, 0xbe, 0x25, 0xee, 0xf2, 0x65, 0x72, 0xf8, 0x1b,
	0xab, 0x02, 0x76, 0x63, 0x34, 0x1c, 0xce, 0x57, 0xa9, 0x35, 0x8f, 0x9e, 0xb6, 0xef, 0xeb, 0xf1,
	0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xf3, 0x9a, 0x19, 0x70, 0x01, 0x00, 0x00,
}
